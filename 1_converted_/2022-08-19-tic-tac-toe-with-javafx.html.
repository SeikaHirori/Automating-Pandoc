<p>--- layout: post title: Tic-Tac-Toe with JavaFX date:
'2022-08-19T11:55:00.004-07:00' author: WaToArt tags: - Imported
modified_time: '2022-08-19T12:08:21.862-07:00' blogger_id:
tag:blogger.com,1999:blog-955763926904757318.post-5934315505881690408
blogger_orig_url:
https://watoart.blogspot.com/2022/08/tic-tac-toe-with-javafx.html
---</p>
<p> <span class="jg ii"
style="background-color: white; box-sizing: inherit; color: #292929; font-family: charter, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif; font-size: 18px; font-weight: 700; letter-spacing: -0.003em;">Exercise</span><span
style="background-color: white; color: #292929; font-family: charter, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif; font-size: 18px; letter-spacing: -0.003em;">:</span><a
href="https://java-programming.mooc.fi/part-13/5-multiple-views"
class="au kc" rel="noopener ugc nofollow"
style="-webkit-tap-highlight-color: transparent; background-color: white; box-sizing: inherit; font-family: charter, Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif; font-size: 18px; letter-spacing: -0.003em;"
target="_blank"> Tic-Tac-Toe (3 parts)</a></p>
<div class="l" style="box-sizing: inherit;">
<div class="l" style="box-sizing: inherit;">
<section style="box-sizing: inherit;">
<div style="box-sizing: inherit;">
<div class="ia ib ic id ie"
style="box-sizing: inherit; color: rgba(0, 0, 0, 0.8); font-family: medium-content-sans-serif-font, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; overflow-wrap: break-word; word-break: break-word;">
<p><span class="jg ii"
style="box-sizing: inherit; font-weight: 700;">Abstract</span>: Create
the Tic-Tac-Toe game utilizing JavaFX as the GUI/Front-end. Learn and
implement ‘event-based programming’. The program works, but is missing
several features. JavaFX was handy, but I am curious how the process
would be if I were to use language (i.e. Python or JavaScript) or if I
used a different tool (i.e. Spring frameworK). Once I progress farther
into my programming journey, I would like to approach this exercise
again with implementing new gained knowledge and different tools.</p>
</div>
<div class="o dy kd ke hm kf" role="separator"
style="box-sizing: inherit; color: rgba(0, 0, 0, 0.8); display: flex; font-family: medium-content-sans-serif-font, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; justify-content: center; margin-bottom: 14px; margin-top: 32px; padding-bottom: 10px; padding-top: 24px;">
<span class="kg gd cj kh ki kj"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; margin-right: 20px; width: 3px;"></span><span
class="kg gd cj kh ki kj"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; margin-right: 20px; width: 3px;"></span><span
class="kg gd cj kh ki"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; width: 3px;"></span>
</div>
<section id="8cf3"
class="kk kl ih bn km kn ko kp kq kr ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh gi ia ib ic id ie"
data-selectable-paragraph=""
style="box-sizing: inherit; color: rgba(0, 0, 0, 0.8); font-family: medium-content-sans-serif-font, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; overflow-wrap: break-word; word-break: break-word;">
<h1
class="kk kl ih bn km kn ko kp kq kr ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh gi"
data-selectable-paragraph=""
style="box-sizing: inherit; color: #292929; font-family: sohne, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 20px; letter-spacing: 0px; line-height: 24px; margin: 1.5em 0px -0.37em;">Thought
process:</h1>
<p>I had always intended to create a Tic-Tac-Toe program after
completing the Java MOOC, but I didn’t think I would create it within
this course. I was excited when I saw this was the last exercise of the
chapter!</p>
<p>I wanted to use multiple classes, but I was overwhelmed by the huge
amount of possible approaches. I knew that I wanted to use multiple past
concepts and ideas (i.e. multidimensional array), but I was not sure how
to incorporate it with JavaFX.</p>
<p>It took a while to learn how to utilize ‘event-based programming’,
but it was very powerful when I learned how it worked.</p>
<p>At the initial stage of of the exercise, it was difficult to break
down ideas into small bits as most of the general components came about
as I wrote the code. Had I realized these ideas earlier, they would have
been separated into their own classes.</p>
<p>I wanted to refactor, but I didn’t want to do so after looking at
TMC’s code. If I did, my approach would be similar to TMC’s. Plus, I
think I rather rebuild from scratch as the code isn’t too big AND there
are some things I could condense.</p>
</section>
<div class="o dy kd ke hm kf" role="separator"
style="box-sizing: inherit; color: rgba(0, 0, 0, 0.8); display: flex; font-family: medium-content-sans-serif-font, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; justify-content: center; margin-bottom: 14px; margin-top: 32px; padding-bottom: 10px; padding-top: 24px;">
<span class="kg gd cj kh ki kj"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; margin-right: 20px; width: 3px;"></span><span
class="kg gd cj kh ki kj"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; margin-right: 20px; width: 3px;"></span><span
class="kg gd cj kh ki"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; width: 3px;"></span>
</div>
<section id="5009"
class="kk kl ih bn km kn ko kp kq kr ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh gi ia ib ic id ie"
data-selectable-paragraph=""
style="box-sizing: inherit; color: rgba(0, 0, 0, 0.8); font-family: medium-content-sans-serif-font, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; overflow-wrap: break-word; word-break: break-word;">
<h1
class="kk kl ih bn km kn ko kp kq kr ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh gi"
data-selectable-paragraph=""
style="box-sizing: inherit; color: #292929; font-family: sohne, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 20px; letter-spacing: 0px; line-height: 24px; margin: 1.5em 0px -0.37em;">Future:</h1>
<ul>
<li><span id="25ff">If I were to rework this right now from scratch, the
first thing is to migrate basic code and functions into a logic class
(i.e. turn order, integrating int[][]). I originally had centered
‘Turn:’, BUT TMC didn’t like this code as I had used HBox to achieve the
outcome.</span></li>
<li><span id="af09">In the far future, I do want to approach this
application whenever I learn more concepts and use a different
programming language and tools. I think MOOC.fi’s course on ‘TDD’ would
help me immensely for this exercise.</span></li>
<li><span id="e825">NOTEWORTHY: using ‘.isBlank’ worked locally, but TMC
didn’t want that. In order to maintain the consistent button size, the
workaround used both ‘.replaceAll(“ “, “”) and ‘.isEmpty’ to achieve the
same results.</span></li>
</ul>
</section>
<div class="o dy kd ke hm kf" role="separator"
style="box-sizing: inherit; color: rgba(0, 0, 0, 0.8); display: flex; font-family: medium-content-sans-serif-font, -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; justify-content: center; margin-bottom: 14px; margin-top: 32px; padding-bottom: 10px; padding-top: 24px;">
<span class="kg gd cj kh ki kj"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; margin-right: 20px; width: 3px;"></span><span
class="kg gd cj kh ki kj"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; margin-right: 20px; width: 3px;"></span><span
class="kg gd cj kh ki"
style="background-color: #080808; border-radius: 50%; box-sizing: inherit; display: inline-block; height: 3px; width: 3px;"></span>
</div>
<section id="b2e1"
class="kk kl ih bn km kn ko kp kq kr ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh gi ia ib ic id ie"
data-selectable-paragraph=""
style="box-sizing: inherit; overflow-wrap: break-word; word-break: break-word;">
<h1
class="kk kl ih bn km kn ko kp kq kr ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh gi"
data-selectable-paragraph=""
style="box-sizing: inherit; color: #292929; font-family: sohne, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 20px; letter-spacing: 0px; line-height: 24px; margin: 1.5em 0px -0.37em;">Missing
features:</h1>
<p>&gt;&gt; Return feedback to users on who won OR was a tie game.</p>
<ul>
<li><span id="35a2">Was unsure how to count up the tallies with only
buttons, but using a multidimensional array would suffice.</span></li>
</ul>
<p>&gt;&gt; Show a visual of which buttons gave the winner the
victory.</p>
<ul>
<li><span id="5a42">Wanted to use array, but unsure how to incorporate
it where it works together with the buttons in the
application.</span></li>
</ul>
<p>&gt;&gt; No ‘restart ’ and ‘quit/close’ program function.</p>
<ul>
<li><span id="e1c5">Option: once the game finishes, have the last button
change to another subview with a prompt to start a new
session.</span></li>
</ul>
<div>
<span
style="color: #292929; font-family: charter, Georgia, Cambria, Times New Roman, Times, serif;"><span
style="font-size: 18px; letter-spacing: -0.054px;"><br />
</span></span>
</div>
<div>
# Original Posted Date on Medium: May 26, 2022
</div>
<ul>
<li></li>
</ul>
</section>
</div>
</section>
</div>
</div>
