<p>--- layout: post title: Wiki | Replicating Wikipedia &amp; Writing
Front-end Tests date: '2022-09-03T19:01:00.006-07:00' author: WaToArt
tags: - CS50w modified_time: '2022-09-06T10:40:46.275-07:00' blogger_id:
tag:blogger.com,1999:blog-955763926904757318.post-9148836230267216909
blogger_orig_url:
https://watoart.blogspot.com/2022/09/wiki-replicating-wikipedia-writing.html
---</p>
<p> </p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Repo</span><span
data-darkreader-inline-bgcolor="" data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">:
</span><a href="https://github.com/WaToArt/replicate-wiki"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">https://github.com/WaToArt/replicate-wiki</span></a></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Abstract</span><span
data-darkreader-inline-bgcolor="" data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">:
Replicate Wikipedia by using Django, MarkDown2, and HTML according to
the specifications. Focused on creating views.py and other things within
the Django framework. For writing tests, it was a self-imposed journey
to figure out how to test Front-end by experting with Selenium,
Pylenium, and Playwright.</span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Specifications</span><span
data-darkreader-inline-bgcolor="" data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">:
</span><a href="https://cs50.harvard.edu/web/2020/projects/1/wiki/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">https://cs50.harvard.edu/web/2020/projects/1/wiki/</span></a></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">___</span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">This
is my first completed project that uses </span><a
href="https://www.djangoproject.com/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Django</span></a><span
data-darkreader-inline-bgcolor="" data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">
as the web framework. The focus of this project was learning how
templates/views.py worked within Django.</span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">I
will not lie: It was difficult understanding how Django worked. I had to
constantly refer to the CS50w’s lectures and examples, Django’s official
doc, StackOverFlow (SOF), and various other resources found via Google.
This is understandable as Django was new to me… but honestly,
understanding how to develop a website was so daunting compared to doing
various back-end stuff.</span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">I
think the biggest personal hindrance was misunderstanding how variables
are handled in Django. Another hurdle was forgetting a step when setting
up a new app and/or page. Lastly, various misc things were:</span></p>
<ul>
<li><p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Enabling
a global variable to be used in all Django templates</span></p></li>
<li><p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">How
to implement MarkDown2</span></p></li>
<li><p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">How
CS50w’s module “util” worked</span></p></li>
<li><p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">How
“request.POST” and “request.GET” works</span></p></li>
</ul>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The
biggest struggle of them all: Not knowing how to use the Test-Driven
Development (TDD) methodology during the process. I was not sure how to
test the Front-end at all. I went in blind developing the wiki project
to specs. After I finished building most of the project, I tried to dig
up info on how to test the front-end. Somewhere on Google search, I
learned that a form of testing for Front-end is called end-to-end
testing (according to </span><a
href="https://www.atlassian.com/continuous-delivery/software-testing/types-of-software-testing"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">atlassian</span></a><span
data-darkreader-inline-bgcolor="" data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">;
this is called by various names too according to several different
posts). </span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Starting
off on the journey to trying to test the front-end (with my current
knowledge of templates and views.py), I saw various recommendations on
reddit that mentioned </span><a
href="https://www.obeythetestinggoat.com/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Obey
the Testing Goat</span></a><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">
(OtTG). I skimmed the first few chapters, and they recommended Selenium.
This was my first front-end test tool. I gave it a try, but I was
unsatisfied by the confusing terms and slow performance. Plus, the setup
to run Selenium within Python was hard. I found some solutions after
various Google searches, but the experience turned me off from
it.</span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Then,
I stumbled upon the TDD</span><a
href="https://test-driven-django-development.readthedocs.io/en/latest/index.html"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">
Django workshop doc</span></a><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">.
For this one, they only used </span><a
href="https://docs.djangoproject.com/en/4.1/topics/testing/tools/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Django’s
test client</span></a><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">.
A great thing about using Django’s test client was that the project
didn’t need to run actively to work. However, it was difficult reading
through the official docs since they didn’t provide examples of how each
function worked. When they do provide an example, they do not show what
library was imported. This becomes a duck hunt to figure out what they
imported. More notably, the test tool did not meet my needs of how a
user would interact with the website. For example, the interaction would
be:</span></p>
<ol>
<li><p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Start
on the homepage.</span></p></li>
<li><p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Locate
and click on the link for creating a new page.</span></p></li>
</ol>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Afterwards,
I found out about Pylenium. I saw it mentioned when I looked up “Cypress
Python” since Cypress was only supported on JavaScript. Writing tests
was seamless with Pylenium and the setup was not too hard. HOWEVER, it
seemed like the automated thing to download WebDrivers seemed to not be
working on my M1 Macbook Air. I ran it locally, but it was a minor
inconvenience. I thought I would settle on Pylenium but the small
scaleness of the tool/ project plus it looking like it depends on
Selenium-wire, which makes me wary. </span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">As
the last stop, I saw Playwright as another big tool that was mentioned
alongside Selenium and Cypress. It works on most major programming
languages like JavaScript, Python, .NET, and Java. I tried out the
examples from the docs, and wrote some Playwright tests for the project.
It is a bit confusing how locators and expects works, but the
documentation for these things are understandable. Despite the small
struggles, the experience has been quite lovely. It smoothly integrates
with Pytest too!</span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Concluding</span><span
data-darkreader-inline-bgcolor="" data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">:
First section of the project was focused on using Django for the Wiki
project was a difficult task. It will take a while to get used to it,
but learning it will be a great asset for myself. The second half
focused a lot more time trying to figure out how to test the front-end,
which will be crucial for implementing TDD going forward.</span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">I
wrote a lot more about learning the testing tools than the wiki project
itself. I think the struggle for the Wiki could be talked about more,
but I felt like it was more “ahhh HA!” moments like “Wait, how does the
Python code I wrote be used for the Django template variable?” and “o
how does request.GET and request.POST work?”. </span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">I
think the more crucial part was discovering the front-end test tools. It
was nice to have built the Wiki project, but it was frustrating not
having automated tests whenever I broke the code. For myself, writing
tests afterwards feels… odd? It feels like I am forgetting many
situations to assert for. </span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Moving
forward for WebDev (and Django), I will use the Django test client and
Playwright to test. Django’s test client works when the website isn’t
running, and I think it is great for setting foundational tests like
status codes, templates, and so on. Playwright will handle the rest,
such as </span></p>
<p><br />
</p>
<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">For
plans now: I will pause going through CS50w for now and resume it after
I tackle Obey the Testing Goat (OtTG). The reason being: OtTG tackles
TDD with the emphasis on Django and using Front-end testing tools. From
quickly glancing at the book, it does not seem like too long of a
detour. Plus, the methodology seems like life-long-lasting compared to
just learning tools that will constantly change. Me learning how to TDD
for WebDev will be beneficial to me in my opinion.</span></p>
<p><br />
EDIT (9/6/2022)</p>
<div>
<br />

</div>
<div>
I didn't think about it now, but something that could be reworked is how
link to random entry works. Right now, the page already randomly
selected an entry and the user could see what it is. I think this
happened because the code runs and outputs the random entry when the the
refreshes. I think at the time of the code implementation, I was unsure
how to use Django and HTML. A change I would make is that the link would
be "/random", so the user would be kept in suspense as to what they
would get. Surprises are fun :3.
</div>
<div>
<br />

<p><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #e8e6e3; background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Tools
used:</span></p>
<ul>
<li><p><a href="https://www.djangoproject.com/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Django</span></a></p></li>
<li><p><a href="https://github.com/trentm/python-markdown2"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">MarkDown2</span></a></p></li>
<li><p><a href="https://docs.pytest.org/en/7.1.x/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Pytest</span></a></p></li>
<li><p><a href="https://www.selenium.dev/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Selenium</span></a></p></li>
<li><p><a href="https://docs.pylenium.io/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Pylenium</span></a></p></li>
<li><p><a href="https://playwright.dev/"
style="text-decoration: none;"><span data-darkreader-inline-bgcolor=""
data-darkreader-inline-color=""
style="--darkreader-inline-bgcolor: transparent; --darkreader-inline-color: #56a3f1; background-color: transparent; color: #1155cc; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Playwright</span></a></p></li>
</ul>
</div>
